/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var chef = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"prog":4,"recipe":5,"TOKEN_NEWLINE":6,"title":7,"optionalDescription":8,"ingredientSection":9,"cookingTimeAndOven":10,"method":11,"optionalServeStatement":12,"nextLine":13,"TOKEN_EOF":14,"upperIdentifier":15,"TOKEN_DOT":16,"servesDishes":17,"description":18,"identifier":19,"WHITE":20,"TITLE_PART":21,"IDENTIFIER_PART":22,"TOKEN_INGREDIENTS_HEAD":23,"ingredientList":24,"ingredientDeclaration":25,"INTEGER":26,"ingredientMeasure":27,"TOKEN_MEASURE_TYPE":28,"TOKEN_MEASURE":29,"timeUnit":30,"TOKEN_MINUTES":31,"TOKEN_HOURS":32,"cookingTime":33,"ovenTemperature":34,"TOKEN_COOKING_TIME":35,"TOKEN_PREHEAT_OVEN_START":36,"TOKEN_PREHEAT_OVEN_END":37,"TOKEN_PREHEAT_OVEN_GAS_MARK":38,"TOKEN_METHOD_HEAD":39,"methodList":40,"completeMethodStatement":41,"methodStatement":42,"takeFromRefrigerator":43,"putIntoMixingBowl":44,"foldIntoMixingBowl":45,"addToMixingBowl":46,"removeFromMixingBowl":47,"combineIntoMixingBowl":48,"divideIntoMixingBowl":49,"addDryIngredientsToMixingBowl":50,"liquifyIngredient":51,"liquifyMixingBowl":52,"stirForMinutes":53,"stirIngredientIntoMixingBowl":54,"mixMixingBowlWell":55,"cleanMixingBowl":56,"pourContentsIntoBakingDish":57,"actionLoopStart":58,"actionLoopEnd":59,"setAside":60,"serveWith":61,"refrigerate":62,"targetMixingBowl":63,"TOKEN_MIXING_BOWL":64,"ORDINAL":65,"targetBakingDish":66,"TOKEN_BAKING_DISH":67,"TOKEN_THE":68,"TOKEN_TAKE":69,"TOKEN_FROM":70,"TOKEN_REFRIGERATOR":71,"TOKEN_PUT":72,"TOKEN_INTO":73,"optionalTHE":74,"TOKEN_FOLD":75,"TOKEN_ADD":76,"TOKEN_TO":77,"TOKEN_REMOVE":78,"TOKEN_COMBINE":79,"TOKEN_DIVIDE":80,"TOKEN_DRY":81,"TOKEN_INGREDIENTS":82,"TOKEN_LIQUIFY":83,"TOKEN_CONTENTS":84,"TOKEN_OF":85,"TOKEN_STIR":86,"TOKEN_FOR":87,"TOKEN_MIX":88,"TOKEN_WELL":89,"TOKEN_CLEAN":90,"TOKEN_POUR":91,"TOKEN_UNTIL":92,"TOKEN_SET":93,"TOKEN_ASIDE":94,"TOKEN_SERVE":95,"TOKEN_WITH":96,"TOKEN_REFRIGERATE":97,"TOKEN_SERVES":98,"$accept":0,"$end":1},
terminals_: {2:"error",6:"TOKEN_NEWLINE",14:"TOKEN_EOF",16:"TOKEN_DOT",20:"WHITE",21:"TITLE_PART",22:"IDENTIFIER_PART",23:"TOKEN_INGREDIENTS_HEAD",26:"INTEGER",28:"TOKEN_MEASURE_TYPE",29:"TOKEN_MEASURE",31:"TOKEN_MINUTES",32:"TOKEN_HOURS",35:"TOKEN_COOKING_TIME",36:"TOKEN_PREHEAT_OVEN_START",37:"TOKEN_PREHEAT_OVEN_END",38:"TOKEN_PREHEAT_OVEN_GAS_MARK",39:"TOKEN_METHOD_HEAD",64:"TOKEN_MIXING_BOWL",65:"ORDINAL",67:"TOKEN_BAKING_DISH",68:"TOKEN_THE",69:"TOKEN_TAKE",70:"TOKEN_FROM",71:"TOKEN_REFRIGERATOR",72:"TOKEN_PUT",73:"TOKEN_INTO",75:"TOKEN_FOLD",76:"TOKEN_ADD",77:"TOKEN_TO",78:"TOKEN_REMOVE",79:"TOKEN_COMBINE",80:"TOKEN_DIVIDE",81:"TOKEN_DRY",82:"TOKEN_INGREDIENTS",83:"TOKEN_LIQUIFY",84:"TOKEN_CONTENTS",85:"TOKEN_OF",86:"TOKEN_STIR",87:"TOKEN_FOR",88:"TOKEN_MIX",89:"TOKEN_WELL",90:"TOKEN_CLEAN",91:"TOKEN_POUR",92:"TOKEN_UNTIL",93:"TOKEN_SET",94:"TOKEN_ASIDE",95:"TOKEN_SERVE",96:"TOKEN_WITH",97:"TOKEN_REFRIGERATE",98:"TOKEN_SERVES"},
productions_: [0,[3,1],[4,2],[4,1],[4,1],[5,6],[13,1],[13,2],[13,1],[7,4],[12,3],[12,1],[8,2],[8,0],[18,2],[18,3],[18,2],[18,3],[18,2],[18,3],[18,2],[18,3],[15,3],[15,3],[15,1],[19,3],[19,3],[19,1],[9,3],[24,2],[24,1],[25,2],[25,4],[25,6],[25,4],[27,2],[27,1],[30,1],[30,1],[10,2],[10,2],[10,3],[10,3],[10,0],[33,7],[34,7],[34,10],[11,2],[40,2],[40,1],[41,2],[41,2],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[63,1],[63,3],[66,1],[66,3],[66,3],[66,5],[43,8],[44,8],[44,10],[74,3],[74,1],[45,8],[45,10],[46,4],[46,8],[46,10],[47,4],[47,8],[47,10],[48,4],[48,8],[48,10],[49,4],[49,8],[49,10],[50,6],[50,10],[50,12],[51,4],[52,10],[53,8],[53,12],[54,10],[55,4],[55,8],[56,6],[56,8],[56,6],[56,4],[57,14],[58,6],[58,2],[59,6],[59,10],[60,4],[61,6],[61,6],[62,2],[62,8],[17,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0];
break;
case 2:$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:this.$ = [$$[$0]];
break;
case 5:this.$ = new ASTNode(NodeType.RECIPE, {title: $$[$0-5], cookingTimeAndOven: $$[$0-3]}, {ingredients: $$[$0-3], method: $$[$0-1], serve: $$[$0]});
break;
case 9:if(yy.lexer.topState() != 'MODE_CHECK'){/*console.log('BEGIN MODE_CHECK');*/ yy.lexer.begin("MODE_CHECK");}this.$ = new ASTNode(NodeType.TITLE, $$[$0-3]);
break;
case 10:this.$ = $$[$0-1]
break;
case 11:this.$ = new ASTNode(NodeType.UNARY_INT, 0, null, null, NodeSubtype.SERVES);
break;
case 22:$$[$0-2].val1 += ' ' + $$[$0]; this.$ = $$[$0-2];
break;
case 23:$$[$0-2].val1 += ' ' + $$[$0]; this.$ = $$[$0-2];
break;
case 24:this.$ = new ASTNode(NodeType.IDENTIFIER, $$[$0]);
break;
case 25:$$[$0-2].val1 += ' ' + $$[$0]; this.$ = $$[$0-2];
break;
case 26:$$[$0-2].val1 += ' ' + $$[$0]; this.$ = $$[$0-2];
break;
case 27:this.$ = new ASTNode(NodeType.IDENTIFIER, $$[$0]);
break;
case 28:this.$ = new ASTNode(NodeType.INGREDIENTS, $$[$0-1]);
break;
case 29:$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 30:this.$ = [$$[$0]];
break;
case 31:this.$ = new ASTNode(NodeType.INGREDIENT, $$[$0-1], undefined, true);
break;
case 32:this.$ = new ASTNode(NodeType.INGREDIENT, $$[$0-1], $$[$0-3], true);
break;
case 33:this.$ = new ASTNode(NodeType.INGREDIENT, $$[$0-1], $$[$0-5], $$[$0-3]);
break;
case 34:this.$ = new ASTNode(NodeType.INGREDIENT, $$[$0-1], undefined, $$[$0-3]);
break;
case 35:this.$ = isDry($$[$0], $$[$0-1]);
break;
case 36:this.$ = isDry($$[$0]);
break;
case 44:this.$ = new ASTNode(NodeType.COOKING_TIME, $$[$0-4], $$[$0-2]);
break;
case 45:this.$ = new ASTNode(NodeType.OVEN_TEMPERATURE, $$[$0-4]);
break;
case 46:this.$ = new ASTNode(NodeType.OVEN_TEMPERATURE, $$[$0-7], $$[$0-2]);
break;
case 47:this.$ = new ASTNode(NodeType.METHOD, $$[$0]);
break;
case 48:$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 49:this.$ = [$$[$0]];
break;
case 50:this.$ = $$[$0-1];
break;
case 51:this.$ = $$[$0-1];
break;
case 72:this.$ = new ASTNode(NodeType.MIXING_BOWL, 1);
break;
case 73:this.$ = new ASTNode(NodeType.MIXING_BOWL, $$[$0-2]);
break;
case 74:this.$ = new ASTNode(NodeType.BAKING_DISH, 1);
break;
case 75:this.$ = new ASTNode(NodeType.MIXING_BOWL, $$[$0-2]);
break;
case 76:this.$ = new ASTNode(NodeType.BAKING_DISH, 1);
break;
case 77:this.$ = new ASTNode(NodeType.MIXING_BOWL, $$[$0-2]);
break;
case 78:this.$ = new ASTNode(NodeType.UNARY_INGR, $$[$0-5], null, null, NodeSubtype.TAKE_FROM_REFRIGERATOR);
break;
case 79:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-5], $$[$0-1], null, NodeSubtype.PUT);
break;
case 80:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-7], $$[$0-1], null, NodeSubtype.PUT);
break;
case 83:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-5], $$[$0-1], null, NodeSubtype.FOLD);
break;
case 84:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-7], $$[$0-1], null, NodeSubtype.FOLD);
break;
case 85:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-1], new ASTNode(NodeType.MIXING_BOWL, 1), null, NodeSubtype.ADD);
break;
case 86:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-5], $$[$0-1], null, NodeSubtype.ADD);
break;
case 87:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-7], $$[$0-1], null, NodeSubtype.ADD);
break;
case 88:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-1], new ASTNode(NodeType.MIXING_BOWL, 1), null, NodeSubtype.REMOVE);
break;
case 89:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-5], $$[$0-1], null, NodeSubtype.REMOVE);
break;
case 90:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-7], $$[$0-1], null, NodeSubtype.REMOVE);
break;
case 91:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-1], new ASTNode(NodeType.MIXING_BOWL, 1), null, NodeSubtype.COMBINE);
break;
case 92:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-5], $$[$0-1], null, NodeSubtype.COMBINE);
break;
case 93:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-7], $$[$0-1], null, NodeSubtype.COMBINE);
break;
case 94:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-1], new ASTNode(NodeType.MIXING_BOWL, 1), null, NodeSubtype.DIVIDE);
break;
case 95:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-5], $$[$0-1], null, NodeSubtype.DIVIDE);
break;
case 96:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-7], $$[$0-1], null, NodeSubtype.DIVIDE);
break;
case 97:this.$ = new ASTNode(NodeType.UNARY_BOWL, new ASTNode(NodeType.MIXING_BOWL, 1), null, null, NodeSubtype.ADD_DRY);
break;
case 98:this.$ = new ASTNode(NodeType.UNARY_BOWL, $$[$0-1], null, null, NodeSubtype.ADD_DRY);
break;
case 99:this.$ = new ASTNode(NodeType.UNARY_BOWL, $$[$0-1], null, null, NodeSubtype.ADD_DRY);
break;
case 100:this.$ = new ASTNode(NodeType.UNARY_INGR, $$[$0-1], null, null, NodeSubtype.LIQUEFY_INGR);
break;
case 101:this.$ = new ASTNode(NodeType.UNARY_BOWL, $$[$0-1], null, null, NodeSubtype.LIQUEFY_BOWL);
break;
case 102:this.$ = new ASTNode(NodeType.BINARY_BOWL_INT, new ASTNode(NodeType.MIXING_BOWL, 1), $$[$0-3], null, NodeSubtype.STIR);
break;
case 103:this.$ = new ASTNode(NodeType.BINARY_BOWL_INT, $$[$0-7], $$[$0-3], null, NodeSubtype.STIR);
break;
case 104:this.$ = new ASTNode(NodeType.BINARY_INGR_BOWL, $$[$0-7], $$[$0-1], null, NodeSubtype.STIR_INTO);
break;
case 105:this.$ = new ASTNode(NodeType.UNARY_BOWL, new ASTNode(NodeType.MIXING_BOWL, 1), null, null, NodeSubtype.MIX);
break;
case 106:this.$ = new ASTNode(NodeType.UNARY_BOWL, $$[$0-3], null, null, NodeSubtype.MIX);
break;
case 107:this.$ = new ASTNode(NodeType.UNARY_BOWL, new ASTNode(NodeType.MIXING_BOWL, $$[$0-3]), null, null, NodeSubtype.CLEAN);
break;
case 108:this.$ = new ASTNode(NodeType.UNARY_BOWL, new ASTNode(NodeType.MIXING_BOWL, $$[$0-3]), null, null, NodeSubtype.CLEAN);
break;
case 109:this.$ = new ASTNode(NodeType.UNARY_BOWL, new ASTNode(NodeType.MIXING_BOWL, 1), null, null, NodeSubtype.CLEAN);
break;
case 110:this.$ = new ASTNode(NodeType.UNARY_BOWL, new ASTNode(NodeType.MIXING_BOWL, 1), null, null, NodeSubtype.CLEAN);
break;
case 111:this.$ = new ASTNode(NodeType.BINARY_BOWL_DISH, $$[$0-5], $$[$0-1], null, NodeSubtype.POUR);
break;
case 112:this.$ = new ASTNode(NodeType.LOOP, $$[$0-5], $$[$0-1], null, NodeSubtype.START);
break;
case 113:
		var index = $$[$0-1].val1.indexOf(' ');
	this.$ = new ASTNode(NodeType.LOOP, new ASTNode(NodeType.IDENTIFIER, $$[$0-1].val1.substring(0, index)), new ASTNode(NodeType.IDENTIFIER, $$[$0-1].val1.substring(index + 1)), null, NodeSubtype.START);
break;
case 114:this.$ = new ASTNode(NodeType.LOOP, $$[$0-1], $$[$0-5], null, NodeSubtype.END);
break;
case 115:this.$ = new ASTNode(NodeType.LOOP, $$[$0-1], $$[$0-5], $$[$0-9], NodeSubtype.END);
break;
case 116:this.$ = new ASTNode(NodeType.SET_ASIDE);
break;
case 117:this.$ = new ASTNode(NodeType.UNARY_RECIPE, $$[$0-1]);
break;
case 118:this.$ = new ASTNode(NodeType.UNARY_RECIPE, $$[$0-1]);
break;
case 119:this.$ = new ASTNode(NodeType.UNARY_INT, 0, null, null, NodeSubtype.REFRIGERATE);
break;
case 120:this.$ = new ASTNode(NodeType.UNARY_INT, $$[$0-3], null, null, NodeSubtype.REFRIGERATE);
break;
case 121:this.$ = new ASTNode(NodeType.UNARY_INT, $$[$0-2], null, null, NodeSubtype.SERVES);
break;
}
},
table: [{3:1,4:2,5:3,6:[1,4],7:5,15:6,21:[1,7]},{1:[3]},{1:[2,1],5:8,7:5,15:6,21:[1,7]},{1:[2,3],21:[2,3]},{1:[2,4],21:[2,4]},{8:9,15:12,16:[1,13],18:10,19:11,20:[1,14],21:[1,7],22:[1,15],23:[2,13]},{16:[1,16],20:[1,17]},{6:[2,24],16:[2,24],20:[2,24]},{1:[2,2],21:[2,2]},{9:18,23:[1,19]},{6:[1,20],15:22,16:[1,23],19:21,20:[1,24],21:[1,7],22:[1,15]},{6:[1,25],20:[1,26]},{6:[1,27],20:[1,17]},{6:[1,28]},{6:[1,29]},{6:[2,27],16:[2,27],20:[2,27]},{6:[1,30]},{21:[1,31],22:[1,32]},{10:33,33:34,34:35,35:[1,36],36:[1,37],39:[2,43]},{19:40,22:[1,15],24:38,25:39,26:[1,41],27:42,28:[1,43],29:[1,44]},{23:[2,12]},{6:[1,45],20:[1,26]},{6:[1,46],20:[1,17]},{6:[1,47]},{6:[1,48]},{6:[2,14],16:[2,14],20:[2,14],21:[2,14],22:[2,14]},{21:[1,50],22:[1,49]},{6:[2,16],16:[2,16],20:[2,16],21:[2,16],22:[2,16]},{6:[2,18],16:[2,18],20:[2,18],21:[2,18],22:[2,18]},{6:[2,20],16:[2,20],20:[2,20],21:[2,20],22:[2,20]},{6:[1,51]},{6:[2,22],16:[2,22],20:[2,22]},{6:[2,23],16:[2,23],20:[2,23]},{11:52,39:[1,53]},{6:[1,54],34:55,36:[1,37]},{6:[1,56],33:57,35:[1,36]},{20:[1,58]},{20:[1,59]},{6:[1,60],19:40,22:[1,15],25:61,26:[1,41],27:42,28:[1,43],29:[1,44]},{6:[2,30],22:[2,30],26:[2,30],28:[2,30],29:[2,30]},{6:[1,62],20:[1,26]},{20:[1,63]},{20:[1,64]},{29:[1,65]},{20:[2,36]},{6:[2,15],16:[2,15],20:[2,15],21:[2,15],22:[2,15]},{6:[2,17],16:[2,17],20:[2,17],21:[2,17],22:[2,17]},{6:[2,19],16:[2,19],20:[2,19],21:[2,19],22:[2,19]},{6:[2,21],16:[2,21],20:[2,21],21:[2,21],22:[2,21]},{6:[2,25],16:[2,25],20:[2,25]},{6:[2,26],16:[2,26],20:[2,26]},{16:[2,9],20:[2,9],21:[2,9],22:[2,9],23:[2,9]},{6:[1,67],12:66,13:68,14:[1,69]},{15:105,21:[1,7],40:70,41:71,42:72,43:73,44:74,45:75,46:76,47:77,48:78,49:79,50:80,51:81,52:82,53:83,54:84,55:85,56:86,57:87,58:88,59:89,60:90,61:91,62:92,69:[1,93],72:[1,94],75:[1,95],76:[1,96],78:[1,97],79:[1,98],80:[1,99],83:[1,100],86:[1,101],88:[1,102],90:[1,103],91:[1,104],93:[1,106],95:[1,107],97:[1,108]},{39:[2,39]},{6:[1,109]},{39:[2,40]},{6:[1,110]},{26:[1,111]},{26:[1,112]},{35:[2,28],36:[2,28],39:[2,28]},{6:[2,29],22:[2,29],26:[2,29],28:[2,29],29:[2,29]},{6:[2,31],22:[2,31],26:[2,31],28:[2,31],29:[2,31]},{19:113,22:[1,15],27:114,28:[1,43],29:[1,44]},{19:115,22:[1,15]},{20:[2,35]},{1:[2,5],21:[2,5]},{1:[2,6],6:[2,6],17:116,21:[2,6],98:[1,117]},{1:[2,11],6:[1,118],21:[2,11]},{1:[2,8],6:[2,8],21:[2,8]},{6:[2,47],14:[2,47],15:105,21:[1,7],41:119,42:72,43:73,44:74,45:75,46:76,47:77,48:78,49:79,50:80,51:81,52:82,53:83,54:84,55:85,56:86,57:87,58:88,59:89,60:90,61:91,62:92,69:[1,93],72:[1,94],75:[1,95],76:[1,96],78:[1,97],79:[1,98],80:[1,99],83:[1,100],86:[1,101],88:[1,102],90:[1,103],91:[1,104],93:[1,106],95:[1,107],97:[1,108]},{6:[2,49],14:[2,49],21:[2,49],69:[2,49],72:[2,49],75:[2,49],76:[2,49],78:[2,49],79:[2,49],80:[2,49],83:[2,49],86:[2,49],88:[2,49],90:[2,49],91:[2,49],93:[2,49],95:[2,49],97:[2,49]},{6:[1,120],20:[1,121]},{6:[2,52],20:[2,52]},{6:[2,53],20:[2,53]},{6:[2,54],20:[2,54]},{6:[2,55],20:[2,55]},{6:[2,56],20:[2,56]},{6:[2,57],20:[2,57]},{6:[2,58],20:[2,58]},{6:[2,59],20:[2,59]},{6:[2,60],20:[2,60]},{6:[2,61],20:[2,61]},{6:[2,62],20:[2,62]},{6:[2,63],20:[2,63]},{6:[2,64],20:[2,64]},{6:[2,65],20:[2,65]},{6:[2,66],20:[2,66]},{6:[2,67],20:[2,67]},{6:[2,68],20:[2,68]},{6:[2,69],20:[2,69]},{6:[2,70],20:[2,70]},{6:[2,71],20:[2,71]},{20:[1,122]},{20:[1,123]},{20:[1,125],74:124},{20:[1,126]},{20:[1,127]},{20:[1,128]},{20:[1,129]},{20:[1,130]},{20:[1,131]},{20:[1,132]},{20:[1,133]},{20:[1,134]},{16:[1,136],20:[1,135]},{20:[1,137]},{20:[1,138]},{16:[1,139],20:[1,140]},{39:[2,41]},{39:[2,42]},{20:[1,141]},{20:[1,142]},{6:[1,143],20:[1,26]},{20:[1,144]},{6:[1,145],20:[1,26]},{6:[1,147],13:146,14:[1,69]},{20:[1,148]},{1:[2,7],6:[2,7],21:[2,7]},{6:[2,48],14:[2,48],21:[2,48],69:[2,48],72:[2,48],75:[2,48],76:[2,48],78:[2,48],79:[2,48],80:[2,48],83:[2,48],86:[2,48],88:[2,48],90:[2,48],91:[2,48],93:[2,48],95:[2,48],97:[2,48]},{6:[2,50],14:[2,50],21:[2,50],69:[2,50],72:[2,50],75:[2,50],76:[2,50],78:[2,50],79:[2,50],80:[2,50],83:[2,50],86:[2,50],88:[2,50],90:[2,50],91:[2,50],93:[2,50],95:[2,50],97:[2,50]},{6:[2,51],14:[2,51],21:[2,51],69:[2,51],72:[2,51],75:[2,51],76:[2,51],78:[2,51],79:[2,51],80:[2,51],83:[2,51],86:[2,51],88:[2,51],90:[2,51],91:[2,51],93:[2,51],95:[2,51],97:[2,51]},{19:149,22:[1,15]},{19:150,22:[1,15]},{19:151,22:[1,15]},{22:[2,82],68:[1,152]},{19:153,22:[1,15],81:[1,154]},{19:155,22:[1,15]},{19:156,22:[1,15]},{19:157,22:[1,15]},{19:158,22:[1,15],84:[1,159]},{19:162,22:[1,15],68:[1,161],87:[1,160]},{68:[1,164],89:[1,163]},{64:[1,167],65:[1,165],68:[1,166]},{84:[1,168]},{21:[1,31],22:[1,32],68:[1,169],92:[1,170]},{6:[2,113],20:[2,113]},{94:[1,171]},{96:[1,172]},{6:[2,119],20:[2,119]},{87:[1,173]},{30:174,31:[1,175],32:[1,176]},{37:[1,177]},{6:[2,32],22:[2,32],26:[2,32],28:[2,32],29:[2,32]},{19:178,22:[1,15]},{6:[2,34],22:[2,34],26:[2,34],28:[2,34],29:[2,34]},{1:[2,10],6:[1,118],21:[2,10]},{1:[2,6],6:[2,6],21:[2,6]},{26:[1,179]},{20:[1,180]},{20:[1,181]},{20:[1,182]},{20:[1,183]},{16:[1,184],20:[1,185]},{20:[1,186]},{16:[1,187],20:[1,188]},{16:[1,189],20:[1,190]},{16:[1,191],20:[1,192]},{16:[1,193],20:[1,26]},{20:[1,194]},{20:[1,195]},{20:[1,196]},{20:[1,197]},{16:[1,198]},{20:[1,199]},{20:[1,200]},{20:[1,201]},{16:[1,202]},{20:[1,203]},{20:[1,204]},{20:[1,205]},{16:[1,206]},{20:[1,207]},{20:[1,208]},{16:[1,209]},{16:[2,37]},{16:[2,38]},{16:[1,210],20:[1,211]},{6:[1,212],20:[1,26]},{16:[1,213]},{21:[1,50],22:[1,49],70:[1,214]},{21:[1,50],22:[1,49],73:[1,215]},{21:[1,50],22:[1,49],73:[1,216]},{22:[2,81]},{6:[2,85],20:[2,85]},{21:[1,50],22:[1,49],77:[1,217]},{82:[1,218]},{6:[2,88],20:[2,88]},{21:[1,50],22:[1,49],70:[1,219]},{6:[2,91],20:[2,91]},{21:[1,50],22:[1,49],73:[1,220]},{6:[2,94],20:[2,94]},{21:[1,50],22:[1,49],73:[1,221]},{6:[2,100],20:[2,100]},{85:[1,222]},{26:[1,223]},{63:224,64:[1,225],65:[1,226]},{21:[1,50],22:[1,49],73:[1,227]},{6:[2,105],20:[2,105]},{63:228,64:[1,225],65:[1,226]},{64:[1,229]},{64:[1,231],65:[1,230]},{6:[2,110],20:[2,110]},{85:[1,232]},{19:233,22:[1,15]},{19:234,22:[1,15]},{6:[2,116],20:[2,116]},{15:235,19:236,21:[1,7],22:[1,15]},{26:[1,237]},{6:[1,238]},{6:[1,239]},{38:[1,240]},{6:[2,33],22:[2,33],26:[2,33],28:[2,33],29:[2,33]},{6:[1,241]},{20:[1,242]},{20:[1,243]},{20:[1,244]},{20:[1,245]},{16:[1,246],20:[1,247]},{20:[1,248]},{20:[1,249]},{20:[1,250]},{20:[1,251]},{20:[1,252]},{20:[1,253]},{16:[2,72],20:[2,72]},{20:[1,254]},{20:[1,255]},{20:[1,256]},{16:[1,257]},{20:[1,258]},{16:[1,259]},{20:[1,260]},{16:[1,261],20:[1,262]},{16:[1,263],20:[1,26]},{16:[1,264],20:[1,17]},{16:[1,265],20:[1,26]},{20:[1,266]},{6:[2,44],36:[2,44]},{6:[2,45],35:[2,45]},{26:[1,267]},{6:[2,121],14:[2,121]},{71:[1,268]},{63:269,64:[1,225],65:[1,226],68:[1,270]},{63:271,64:[1,225],65:[1,226],68:[1,272]},{63:273,64:[1,225],65:[1,226],68:[1,274]},{6:[2,97],20:[2,97]},{77:[1,275]},{63:276,64:[1,225],65:[1,226],68:[1,277]},{63:278,64:[1,225],65:[1,226],68:[1,279]},{63:280,64:[1,225],65:[1,226],68:[1,281]},{68:[1,282]},{31:[1,283]},{87:[1,284]},{64:[1,285]},{68:[1,286]},{89:[1,287]},{6:[2,107],20:[2,107]},{64:[1,288]},{6:[2,109],20:[2,109]},{68:[1,289]},{6:[2,112],20:[2,112]},{21:[1,50],22:[1,49],92:[1,290]},{6:[2,114],20:[2,114]},{6:[2,117],20:[2,117]},{6:[2,118],20:[2,118]},{32:[1,291]},{16:[1,292]},{16:[1,293]},{16:[1,294]},{20:[1,295]},{16:[1,296]},{20:[1,297]},{16:[1,298]},{20:[1,299]},{20:[1,300]},{16:[1,301]},{20:[1,302]},{16:[1,303]},{20:[1,304]},{16:[1,305]},{20:[1,306]},{20:[1,307]},{16:[1,308]},{20:[1,309]},{16:[2,73],20:[2,73]},{20:[1,310]},{16:[1,311]},{16:[1,312]},{20:[1,313]},{20:[1,314]},{16:[1,315]},{6:[1,316]},{6:[2,78],20:[2,78]},{6:[2,79],20:[2,79]},{63:317,64:[1,225],65:[1,226]},{6:[2,83],20:[2,83]},{63:318,64:[1,225],65:[1,226]},{6:[2,86],20:[2,86]},{63:319,64:[1,225],65:[1,226]},{63:320,64:[1,225],65:[1,226],68:[1,321]},{6:[2,89],20:[2,89]},{63:322,64:[1,225],65:[1,226]},{6:[2,92],20:[2,92]},{63:323,64:[1,225],65:[1,226]},{6:[2,95],20:[2,95]},{63:324,64:[1,225],65:[1,226]},{63:325,64:[1,225],65:[1,226]},{6:[2,102],20:[2,102]},{26:[1,326]},{63:327,64:[1,225],65:[1,226]},{6:[2,106],20:[2,106]},{6:[2,108],20:[2,108]},{63:328,64:[1,225],65:[1,226]},{19:329,22:[1,15]},{6:[2,120],20:[2,120]},{6:[2,46],35:[2,46]},{16:[1,330]},{16:[1,331]},{16:[1,332]},{16:[1,333]},{20:[1,334]},{16:[1,335]},{16:[1,336]},{16:[1,337]},{16:[1,338]},{20:[1,339]},{16:[1,340]},{20:[1,341]},{16:[1,342],20:[1,26]},{6:[2,80],20:[2,80]},{6:[2,84],20:[2,84]},{6:[2,87],20:[2,87]},{6:[2,98],20:[2,98]},{63:343,64:[1,225],65:[1,226]},{6:[2,90],20:[2,90]},{6:[2,93],20:[2,93]},{6:[2,96],20:[2,96]},{6:[2,101],20:[2,101]},{31:[1,344]},{6:[2,104],20:[2,104]},{73:[1,345]},{6:[2,115],20:[2,115]},{16:[1,346]},{16:[1,347]},{20:[1,348]},{6:[2,99],20:[2,99]},{6:[2,103],20:[2,103]},{65:[1,351],66:349,67:[1,350],68:[1,352]},{16:[1,353]},{16:[2,74]},{20:[1,354]},{20:[1,355]},{6:[2,111],20:[2,111]},{67:[1,356]},{65:[1,358],67:[1,357]},{16:[2,75]},{16:[2,76]},{20:[1,359]},{67:[1,360]},{16:[2,77]}],
defaultActions: {20:[2,12],44:[2,36],54:[2,39],56:[2,40],65:[2,35],109:[2,41],110:[2,42],175:[2,37],176:[2,38],183:[2,81],350:[2,74],356:[2,75],357:[2,76],360:[2,77]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var ASTNode = ast.ASTNode;
var NodeType = ast.NodeType;
var NodeSubtype = ast.NodeSubtype;
var isDry = ast.isDry;

/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 14;
break;
case 1:return 14;
break;
case 2:yy.lexer.begin("COMMENT_SINGLE_LINE");
break;
case 3:yy.lexer.begin("COMMENT_SINGLE_LINE");
break;
case 4:
break;
case 5:yy.lexer.popState();
break;
case 6:return 6;
break;
case 7:return 16;
break;
case 8:return 6;
break;
case 9:if(yy.lexer.topState() == 'INITIAL'){/*console.log('BEGIN MODE_CHECK');*/ yy.lexer.begin("MODE_CHECK");}return 16;
break;
case 10:/*console.log('Oh ingredients');*/ yy.lexer.popState(); yy.lexer.begin("RECIPE_MODE"); return 23;
break;
case 11:yy.lexer.begin("RECIPE_MODE"); return 39;
break;
case 12:yy.lexer.begin("RECIPE_MODE"); return 35;
break;
case 13:yy.lexer.begin("RECIPE_MODE"); return 36;
break;
case 14:return 20;
break;
case 15:/*console.log('AS_MODE_CHECK_' + yy_.yytext + '_');*/ return 22;
break;
case 16:yy.lexer.begin("RECIPE_MODE"); return 23;
break;
case 17:yy.lexer.begin("RECIPE_MODE"); return 39;
break;
case 18:yy.lexer.begin("RECIPE_MODE"); return 35;
break;
case 19:yy.lexer.begin("RECIPE_MODE"); return 36;
break;
case 20:return 37;
break;
case 21:return 'TOKEN_PREHEAT_OVEN_GASMARK';
break;
case 22:return 69;
break;
case 23:return 70;
break;
case 24:return 71;
break;
case 25:return 72;
break;
case 26:return 73;
break;
case 27:return 64;
break;
case 28:return 75;
break;
case 29:return 76;
break;
case 30:return 77;
break;
case 31:return 78;
break;
case 32:return 70;
break;
case 33:return 79;
break;
case 34:return 80;
break;
case 35:return 81;
break;
case 36:return 82;
break;
case 37:return 83;
break;
case 38:return 84;
break;
case 39:return 85;
break;
case 40:return 68;
break;
case 41:return 86;
break;
case 42:return 87;
break;
case 43:return 88;
break;
case 44:return 89;
break;
case 45:return 90;
break;
case 46:return 91;
break;
case 47:return 67;
break;
case 48:return 92;
break;
case 49:return 93;
break;
case 50:return 94;
break;
case 51:return 95;
break;
case 52:return 96;
break;
case 53:return 97;
break;
case 54:return 98;
break;
case 55:return 28;
break;
case 56:return 29;
break;
case 57:return 32;
break;
case 58:return 31;
break;
case 59:yy_.yytext = yy_.yytext.replace('st', '').replace('nd', '').replace('rd', '').replace('th', ''); return 65;
break;
case 60:return 26;
break;
case 61:if (yy_.yytext == 'l' || yy_.yytext == 'g'){ return 29;} /*console.log('GOT IDENTIFIER PART ' + yy_.yytext);*/ return 22;
break;
case 62:/*console.log('GOT TITLE PART ' + yy_.yytext);*/ return 21;
break;
case 63:return 20;
break;
case 64:/*console.log('AS_GENERIC_TITLE_PART_' + yy_.yytext + '_');*/ return 21;
break;
}
},
rules: [/^(?:$)/,/^(?:$)/,/^(?:\/\/)/,/^(?:\/\/)/,/^(?:[^\n]+)/,/^(?:\n)/,/^(?:\n)/,/^(?:\.)/,/^(?:\n)/,/^(?:\.)/,/^(?:Ingredients\.\n)/,/^(?:Method\.\n)/,/^(?:Cooking time:)/,/^(?:Pre-heat oven to\b)/,/^(?:\s+)/,/^(?:.+)/,/^(?:Ingredients\.\n)/,/^(?:Method\.\n)/,/^(?:Cooking time:)/,/^(?:Pre-heat oven to\b)/,/^(?:degrees Celsius\b)/,/^(?:gas mark\b)/,/^(?:Take\b)/,/^(?:from\b)/,/^(?:refrigerator\b)/,/^(?:Put\b)/,/^(?:into\b)/,/^(?:mixing bowl\b)/,/^(?:Fold\b)/,/^(?:Add\b)/,/^(?:to\b)/,/^(?:Remove\b)/,/^(?:from\b)/,/^(?:Combine\b)/,/^(?:Divide\b)/,/^(?:dry\b)/,/^(?:ingredients\b)/,/^(?:Liquefy|Liquify\b)/,/^(?:contents\b)/,/^(?:of\b)/,/^(?:the\b)/,/^(?:Stir\b)/,/^(?:for\b)/,/^(?:Mix\b)/,/^(?:well\b)/,/^(?:Clean\b)/,/^(?:Pour\b)/,/^(?:baking dish\b)/,/^(?:until\b)/,/^(?:Set\b)/,/^(?:aside\b)/,/^(?:Serve\b)/,/^(?:with\b)/,/^(?:Refrigerate\b)/,/^(?:Serves\b)/,/^(?:heaped|level\b)/,/^(?:kg|pinches|pinch|ml|dashes|dash|cups|cup|teaspoons|teaspoon|tablespoons|tablespoon\b)/,/^(?:hours|hour\b)/,/^(?:minutes|minute\b)/,/^(?:[0-9]*[3-9]th|11th|12th|1st|2nd|3rd\b)/,/^(?:[0-9]+)/,/^(?:[a-z][a-zA-Z0-9]*)/,/^(?:[A-Z][a-zA-Z0-9]*)/,/^(?:\s+)/,/^(?:[^\.\n]+)/],
conditions: {"COMMENT_SINGLE_LINE":{"rules":[4,5],"inclusive":false},"RECIPE_MODE":{"rules":[1,3,6,7,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":false},"MODE_CHECK":{"rules":[0,2,8,9,10,11,12,13,14,15,64],"inclusive":true},"INITIAL":{"rules":[0,2,8,9,10,11,12,13,64],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = chef;
exports.Parser = chef.Parser;
exports.parse = function () { return chef.parse.apply(chef, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

// Fix for the web
chefParser = chef;
// END Fix for the web